#!/bin/bash
## -*-shell-script-*-

#### cloudbleed-browser-scan
##
## This script is designed to make it easy to scan your browser history
## to search for sites potentially affected by CloudBleed.
##
## More on CloudBleed:
## https://en.wikipedia.org/wiki/Cloudbleed
##
## This Git repo has the following essential Git repo as a submodule.
## It provides a curated list of potentially-affected sites:
## https://github.com/pirate/sites-using-cloudflare
## 
## Unfortunately there doesn't seem to be a canonical place where the Tor Browser
## gets installed on Linux. It will default to checking in /usr/local 


### Parameters:
run_dir="$PWD"
temp_dir="`mktemp -d /tmp/cloudbleed-browser-scan.XXX`"

## Browser profile paths:
firefox_path_mac="$HOME/Library/Application Support/Firefox/Profiles"
firefox_path_linux="$HOME/.mozilla/firefox"
torbrowser_path_mac="$HOME/Library/Application Support/TorBrowser-Data/Browser"
chromium_path_mac="$HOME/Library/Application Support/Chromium/Default"
chromium_path_linux="$HOME/config/chromium/Default"
chrome_path_mac="$HOME/Library/Application Support/Google/Chrome/Default"
chrome_path_linux="$HOME/.config/google-chrome/Default"
safari_path="$HOME/Library/Safari"
abrowser_path="$HOME/.mozilla/abrowser"
iridium_path="$HOME/.config/iridium/Default"


### Set-up:
mkdir -p $temp_dir/browser-files

## Setup OS-dependent settings:
case "$OSTYPE" in 
    linux-gnu)

	OS="linux"
	firefox_path="$firefox_path_linux"
	chromium_path="$chromium_path_linux"
	chrome_path="$chrome_path_linux"

	## Finding Tor Browser Path:
	app_path="`find $HOME/.local -name 'start-tor-browser.desktop' -print | head -n 1`" 
	if [ -e $app_path ]
	then
	    echo "$0: Found path to TorBrowser." > /dev/stderr
	    pushd $HOME/.local/share > /dev/null

	    torbrowser_base_path="`awk -F= '$1 == \"Icon\" { gsub(/browser\/icons\/.*.png/,\"\",$2); print $2 }' $app_path`"
            torbrowser_path="$torbrowser_base_path/TorBrowser/Data/Browser"

            popd > /dev/null
	else
	    echo "$0 warning: Unable to find path to TorBrowser." > /dev/stderr
	fi

	;;

    darwin*)
	OS="darwin"
	firefox_path="$firefox_path_mac"
	torbrowser_path="$torbrowser_path_mac"
	chromium_path="$chromium_path_mac"
	chrome_path="$chrome_path_mac"
	;;
    
    *)
	    echo "$0: Error, I don't recognize the OS type, exiting!"
	    exit 1
esac


### Function:


## Chrom* date manipulation thanks to:
## http://stackoverflow.com/questions/2141537
function extractUrlsChromium () {

    local configPath="$1"
    local browserName="$2"
    
    if [ -e "$configPath/History" ]
    then
	echo "$0: Found path to $browserName." > /dev/stderr	
	## This is necessary, because the Chromium SQLite databases are locked in their native
	## directory, and copying them breaks the lock on the copy:
	cp "$configPath"/History* $temp_dir/browser-files
	
	pushd $temp_dir/browser-files > /dev/null

	local offset="11644473600"
	local out_file="${browserName}-urls.txt"
	sqlite3 History <<EOF
.mode tabs	
.output $out_file
select "$browserName", url, visit_count, title, datetime(last_visit_time/1000000-$offset,'unixepoch','localtime') from urls;
EOF
       
	popd > /dev/null

	rm -f $temp_dir/browser-files/History*
    else
	echo "$0 warning: Unable to find path to $browserName." > /dev/stderr
    fi

}

function extractUrlsFirefox () {
    
    local profilePath="$1"
    local browserName="$2"
    local profile_dirs=""

    ## Firefox:
    if [ -e "$profilePath" ]
    then

	echo "$0: Found path to $browserName." > /dev/stderr	
	pushd "$profilePath" > /dev/null

	if [ -e profiles.ini ]
	then
	    profile_dirs="`awk -F= '$1==\"Path\" { print $2}' profiles.ini`"
	else
	    profile_dirs="`ls`"
	fi

	for profile in $profile_dirs
	do
	    
	    local outfile="$temp_dir/browser-files/${profile}_${browserName}-urls.txt"

	    sqlite3 $profile/places.sqlite <<EOF
.mode tabs
.output $outfile
select "$browserName", url, visit_count, title, datetime(last_visit_date/1000000,'unixepoch','localtime')
from moz_places;    	    
EOF

	    
	done
	
	popd > /dev/null
	
    else
	echo "$0 warning: Unable to find path to $browserName." > /dev/stderr
    fi

}


## Firefox:
extractUrlsFirefox \
    "$firefox_path" \
    firefox

## Tor Browser
extractUrlsFirefox \
    "$torbrowser_path" \
    torbrowser


## Chromium:
extractUrlsChromium \
    "$chromium_path" \
    Chromium

## Chrome:
extractUrlsChromium \
    "$chrome_path" \
    Chrome

case "$OS" in 
    linux)

	## Abrowser:
	extractUrlsFirefox \
	    "$abrowser_path" \
	    abrowser
	
	## Iridium:
	extractUrlsChromium \
	    "$iridium_path" \
	    Iridium
	;;
    darwin)

	## Safari:
	
	## Safari date manipulation thanks to:
	## https://gist.github.com/dropmeaword/9372cbeb29e8390521c2
	
	if [ -e $safari_path ]
	then
	    
	    echo "$0: Found path to Safari." > /dev/stderr	
	    pushd $safari_path > /dev/null
	    
	    out_file="$temp_dir/browser-files/safari-urls.txt"
	    
	    ## With some joins, I can derive the title and the last visit date, but punting for now:
	    sqlite3 History.db <<EOF
.mode tabs  
.output $out_file
select "Safari", url, visit_count, hv.title, datetime(hv.visit_time + 978307200, 'unixepoch', 'localtime')
from history_items hi, history_visits hv
where hv.history_item = hi.id;
EOF

	    popd > /dev/null
	    
	else
	    echo "$0 warning: Unable to find path to Safari." > /dev/stderr
	fi

	;;

esac


## Check local browser URLs against CloudFlare checklist:

pushd $temp_dir/browser-files > /dev/null

awk -F'\t' -f <( cat <<'EOF'
BEGIN { OFS="\t"; print "Loading CloudFlare domain list..." > "/dev/stderr" }
NR==FNR { cf_domains[$1]; count++; next }
FNR!=NR && FNR==1 && bit==0 { print "Loaded " count " domains." > "/dev/stderr"; bit=1 }
(FNR%100000)==0 { print FNR " browser URLs checked." > "/dev/stderr" }
{ 
  browser_domains++
  split($2,url_parts,"/")

  domain=url_parts[3]

  while(index(domain,".")) {
    if ( domain in cf_domains ) {
      visited_cf_domains[domain] 
      
      if ( last_visit[domain] < $5 )
        last_visit[domain] = $5
      num_visits[domain] += $3
      domain = ""
    }
    else
      domain = substr(domain,(index(domain,".")+1))
  }
}
END {
  
  for(domain in visited_cf_domains) {
    visited_domain_num++
    print domain, num_visits[domain], last_visit[domain]
  }
  print "Found " visited_domain_num " CloudFlare-associated domains out of " browser_domains " domains from your browsers." > "/dev/stderr"

}
EOF
	       ) \
		   $run_dir/sites-using-cloudflare/sorted_unique_cf.txt \
		   *-urls.txt \
		   | sort -n -k 2,2 \
		   | awk -F'\t' '$3 >= "2016-09" || $3 < "2000-01"'

popd > /dev/null


### Clean-up:
#rm -rf /tmp/cloudbleed-browser-scan*
